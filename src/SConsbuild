#/***************************************************************************
# *   Copyright (C) 2009 by Gabriel Huau                                    *
# *                                                                         *
# *   This program is free software; you can redistribute it and/or modify  *
# *   it under the terms of the GNU General Public License as published by  *
# *   the Free Software Foundation; either version 2 of the License, or     *
# *   (at your option) any later version.                                   *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU General Public License for more details.                          *
# *                                                                         *
# *   You should have received a copy of the GNU General Public License     *
# *   along with this program; if not, write to the                         *
# *   Free Software Foundation, Inc.,                                       *
# *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
# ***************************************************************************/


import os
import os.path


#
# Main
#
# Set up the environment and config
Import('env')
Import('configProject')
Import('binDir')

# Construct environnement
# If debug is activated, add some flags to ad debugging symbols
env.MergeFlags([ '-Wall', '-I ./src/'])
if configProject['DEBUG'] == '1':
	env.MergeFlags([ ' -g ', ' -pg '])
else:
	env.MergeFlags([ ' -O3 '])

# Build the project
sourceFiles = []
sourceFiles.append(Glob('./*.cpp', strings=True))
sourceFiles.append(Glob('./sound/src/*.cpp', strings=True))
sourceFiles.append(Glob('./time/src/*.cpp', strings=True))
sourceFiles.append(Glob('./graphic/src/*.cpp', strings=True))
sourceFiles.append(Glob('./dynamicobject/src/*.cpp', strings=True))
sourceFiles.append(Glob('./stats/src/*.cpp', strings=True))
sourceFiles.append(Glob('./log/src/*.cpp', strings=True))
sourceFiles.append(Glob('./scene/src/*.cpp', strings=True))
sourceFiles.append(Glob('./scene/camera/src/*.cpp', strings=True))
sourceFiles.append(Glob('./scene/camera/factory/src/*.cpp', strings=True))
sourceFiles.append(Glob('./scene/camera/listener/src/*.cpp', strings=True))
sourceFiles.append(Glob('./scene/gameobject/components/src/*.cpp', strings=True))
sourceFiles.append(Glob('./scene/gameobject/src/*.cpp', strings=True))
sourceFiles.append(Glob('./scene/page/src/*.cpp', strings=True))
sourceFiles.append(Glob('./core/src/*.cpp', strings=True))
sourceFiles.append(Glob('./core/messages/src/*.cpp', strings=True))
sourceFiles.append(Glob('./input/src/*.cpp', strings=True))

env.Alias('gnollTarget', env.Program(binDir + 'gnoll', sourceFiles))

